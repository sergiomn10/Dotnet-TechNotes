@page "/note-editor"
@page "/note-editor/{NoteId:int}"


@inject ISender Sender
@inject NavigationManager NavigationManager

@if (IsEditMode && Note is not null)
{
    <PageTitle>Editar nota</PageTitle>
}
else
{
    <PageTitle>Crear nota</PageTitle>
}

@if (Note is not null)
{
    <div class="mx-auto max-w-screen-xl px-4 py-8">
        <div class="bg-white rounded-lg shadow-lg p-8">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-2xl font-bold text-gray-900">
                    @(IsEditMode ? $"Editando: {Note.Title}" : "Crear nueva nota")
                </h2>
                <a href="/notes" 
                   class="inline-flex items-center gap-2 rounded-lg bg-gray-100 px-4 py-2 text-gray-700 hover:bg-gray-200 hover:text-gray-900 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                    </svg>
                    Volver
                </a>
            </div>

            <EditForm Model="Note" OnSubmit="HandleSubmit" FormName="NoteEditorForm" class="space-y-4">
                <div class="space-y-2">
                    <label class="text-sm font-medium text-gray-700">Título</label>
                    <InputText @bind-Value="Note.Title" 
                              placeholder="Ingresa el título de la nota" 
                              class="w-full rounded-lg border border-gray-300 p-3 text-gray-700 shadow-sm transition focus:border-blue-500 focus:outline-none focus:ring" />
                </div>

                <div class="space-y-2">
                    <label class="text-sm font-medium text-gray-700">Contenido</label>
                    <InputTextArea @bind-Value="Note.Content" 
                                 placeholder="Escribe el contenido de tu nota aquí..." 
                                 rows="5" 
                                 class="w-full rounded-lg border border-gray-300 p-3 text-gray-700 shadow-sm transition focus:border-blue-500 focus:outline-none focus:ring" />
                </div>

                <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                    <div class="space-y-2">
                        <label class="text-sm font-medium text-gray-700">Fecha de publicación</label>
                        <InputDate @bind-Value="Note.PublishedAt" 
                                 class="w-full rounded-lg border border-gray-300 p-3 text-gray-700 shadow-sm transition focus:border-blue-500 focus:outline-none focus:ring" />
                    </div>

                    <div class="flex items-center space-x-2">
                        <InputCheckbox @bind-Value="Note.IsPublished" 
                                     class="h-5 w-5 rounded border-gray-300 focus:ring-2 focus:ring-blue-500" />
                        <label class="text-sm font-medium text-gray-700">Publicar nota</label>
                    </div>
                </div>

                <button type="submit" 
                        class="w-full rounded-lg bg-blue-600 px-5 py-3 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
                    @(IsEditMode ? "Guardar cambios" : "Crear nota")
                </button>
            </EditForm>

            @if (IsEditMode)
            {
                <form @onsubmit="DeleteNote" @formname="DeleteNoteForm" method="POST" class="mt-6">
                    <button type="submit" 
                            class="w-full rounded-lg bg-red-600 px-5 py-3 text-sm font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors">
                        Eliminar nota
                    </button>
                    <AntiforgeryToken />
                </form>
            }
        </div>
    </div>
}
}

<span class="text-danger">@errorMessage</span>

@code {
    private bool IsEditMode => NoteId != null;
    private string errorMessage = string.Empty;

    [SupplyParameterFromForm]
    private NoteModel? Note { get; set; }
    [Parameter]
    public int? NoteId { get; set; }
    //este override se invoca cuando el componente ha ricibido parametros de su elemento primario
    protected override async Task OnParametersSetAsync()
    {
        if (NoteId is not null)
        {
            var result = await Sender.Send(new GetNoteByIdQuery { Id = (int)NoteId });
            if (result.IsSuccessful)
            {
                /*
                Se agregan dos ?? para indicar que solo cuando Note sea null le asigne los datos de result.
                Para que no obtenga los datos nuevamente cuando se hace submit y se pierdan los datos editados.
                */
                Note ??= result.Value.Adapt<NoteModel>();
                Note.Id = (int)NoteId;
            }
            else
            {
                SetErrorMessage(result.ErrorMessage);
            }

        }
        else
        {
            Note ??= new(); // hace una nueva instancia de Note si es que esta NULL.
        }
    }

    private async Task HandleSubmit()
    {
        if (IsEditMode)
        {
            var command = Note.Adapt<UpdateNoteCommand>();
            var result = await Sender.Send(command);
            if (result.IsSuccessful)
            {
                Note = result.Value.Adapt<NoteModel>();
                Console.WriteLine("Nota actualizada satisfactoriamente");
                NavigationManager.NavigateTo("/notes");
            }
            else
            {
                SetErrorMessage(result.ErrorMessage);
            }
        }
        else
        {

            var command = Note.Adapt<CreateNoteCommand>();
            var result = await Sender.Send(command);
            if (result.IsSuccessful)
            {

                Note = result.Adapt<NoteModel>();
                Console.WriteLine("Nota creada satisfactoriamente");
            }
            else
            {
                SetErrorMessage(result.ErrorMessage);
            }
        }
    }

    private async Task DeleteNote()
    {
        if (NoteId is null)
        {
            return;
        }

        var command = new DeleteNoteCommand { Id = (int)NoteId };
        var result = await Sender.Send(command);
        if (result.IsSuccessful)
        {
            Console.WriteLine("Nota eliminada satisfactoriamente");
            NavigationManager.NavigateTo("/notes");
        }
        else
        {
            Console.WriteLine("Sucedio un error al elimiinar una nota.");
        }
    }

    private void SetErrorMessage(string? error)
    {
        errorMessage = error ?? string.Empty;
    }
}