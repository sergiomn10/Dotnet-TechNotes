@page "/note-editor"
@page "/note-editor/{NoteId:int}"


@inject ISender Sender
@inject NavigationManager NavigationManager

@if (IsEditMode && Note is not null)
{
    <PageTitle>Editar nota</PageTitle>
    <p>Editando nota con el titulo: @Note.Title</p>
    <h3>Editar nota</h3>
    <a href="/notes" class="btn btn-secondary mb-2">Volver a notas</a>
}
else
{
    <PageTitle>Crear nota</PageTitle>
    <h3>Crear nota</h3>
}

@if (Note is not null)
{

    <EditForm Model="Note" OnSubmit="HandleSubmit" FormName="NoteEditorForm">
        <InputText @bind-Value="Note.Title" placeholder="Titulo" class="form-control mb-2" />
        <InputTextArea @bind-Value="Note.Content" placeholder="Contenido" class="form-control mb-2" rows="5" />
        <label>Fecha de publicacion:</label>
        <InputDate @bind-Value="Note.PublishedAt" class="form-control mb-2" />
        <label class="form-check-label mb-2">Publicacion:</label>
        <InputCheckbox @bind-Value="Note.IsPublished" class="form-check-input mb-2" />
        <button type="submit" class="btn btn-primary mt-3 w-100">@(IsEditMode ? "Editar" : "Crear")</button>
    </EditForm>
    @if (IsEditMode)
    {
        <form @onsubmit="DeleteNote" @formname="DeleteNoteForm" method="POST">
            <button type="submit" class="btn btn-danger mt-2">Borrar nota</button>
            @*El componente AntiforgeryToken es muy importante agregarlo en formularios tradicionales para evitar ataques CSRF, generando tokens especificos, ya que en raizor se usa @bind-Value y en auto protege esos ataques.*@
            <AntiforgeryToken />
        </form>
    }
}

@code {
    private bool IsEditMode => NoteId != null;

    [SupplyParameterFromForm]
    private NoteModel? Note { get; set; }
    [Parameter]
    public int? NoteId { get; set; }
    //este override se invoca cuando el componente ha ricibido parametros de su elemento primario
    protected override async Task OnParametersSetAsync()
    {
        if (NoteId is not null)
        {
            var result = await Sender.Send(new GetNoteByIdQuery { Id = (int)NoteId });
            if (result is not null)
            {
                /*
                Se agregan dos ?? para indicar que solo cuando Note sea null le asigne los datos de result.
                Para que no obtenga los datos nuevamente cuando se hace submit y se pierdan los datos editados.
                */
                Note ??= result.Adapt<NoteModel>();
                Note.Id = (int)NoteId;
            }
            else
            {
                Note ??= new(); // hace una nueva instancia de Note si es que esta NULL.
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (IsEditMode)
        {
            var command = Note.Adapt<UpdateNoteCommand>();
            var result = await Sender.Send(command);
            if (result is not null)
            {
                Note = result.Adapt<NoteModel>();
            }
            Console.WriteLine("Nota actualizada satisfactoriamente");
        }
        else
        {

            var command = Note.Adapt<CreateNoteCommand>();
            var result = await Sender.Send(command);
            Note = result.Adapt<NoteModel>();
            Console.WriteLine("Nota creada satisfactoriamente");
        }
    }

    private async Task DeleteNote()
    {
        if(NoteId is null)
        {
            return;
        }

        var command = new DeleteNoteCommand {Id = (int)NoteId};
        var isSuccess = await Sender.Send(command);
        if(isSuccess)
        {
            Console.WriteLine("Nota eliminada satisfactoriamente");
            NavigationManager.NavigateTo("/notes");
        }
        else
        {
            Console.WriteLine("Sucedio un error al elimiinar una nota.");

        }
    }
}