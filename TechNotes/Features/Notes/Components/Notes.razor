@page "/notes"



@* La línea @attribute [StreamRendering] en un componente Blazor indica que el componente usará renderizado por streaming. 
    Esto permite que el contenido del componente se envíe al navegador en fragmentos a medida que se va generando, 
    en lugar de esperar a que todo el componente esté listo. Es útil para mejorar la experiencia de usuario en componentes 
    que realizan operaciones asincrónicas o cargan datos, mostrando contenido parcial más rápido. 
    Esta característica está disponible en Blazor Server y Blazor WebAssembly a partir de .NET 8. *@


@attribute [StreamRendering]

@* servicio creado  *@
@inject INoteColorService ColorService 
@inject ISender Sender;

<PageTitle>Notas</PageTitle>
<div class="bg-white border-b border-gray-200 mb-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-6">
            <div class="flex items-center space-x-3">
                <div class="flex items-center justify-center w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg">
                    <svg class="w-7 h-7" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                </div>
                <div>
                    <h1 class="text-3xl font-bold text-blue-900 tracking-tight">Notas</h1>
                    <p class="text-sm text-gray-500 mt-1">Organiza tus ideas y pensamientos</p>
                </div>
            </div>
            <a href="/note-editor" 
                    class="inline-flex items-center px-6 py-3  font-semibold rounded-xl shadow-lg hover:from-blue-700 hover:to-blue-800 transform hover:scale-105 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
                Nueva Nota
            </a>
        </div>
    </div>
</div>
@if (notes == null)
{
    <p>No hay notas disponibles.</p>
}
else if (notes.Count == 0)
{
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center py-16">
            <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-6">
                <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Cargando las notas...</h3>
            <p class="text-gray-500">Por favor espera un momento</p>
        </div>
    </div>
}
else
{
    <div class="max-2-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-6">
            @foreach (var note in notes)
            {
                <div style="@ColorService.GetNoteInlineStyle(note.Id)"
                     class="group cursor-pointer rounded-2xl shadow-sm border-l-4 hover:shadow-xl hover:-translate-y-1 transition-all duration-300 ease-out overflow-hidden h-64 flex flex-col">
                    <!-- Cabecera de la nota -->
                    <div class="p-3 flex-1 flex flex-col">
                        <div class="flex items-start justify-between mb-3">
                            <a href="/note-editor/@note.Id" class="text-3xl font-semibold text-gray-800  leading-tight line-clamp-2 flex-1 pr-2">
                                @note.Title
                            </a>
                            @if (note.IsPublished)
                            {
                                <div class="flex-shrink-0">
                                    <div class="inline-flex items-center justify-center w-6 h-6 bg-green-100 rounded-full">
                                        <svg class="w-3.5 h-3.5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                        </svg>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <!-- Contenido de nota -->
                        @if (!string.IsNullOrEmpty(note.Content))
                        {
                            <div class="text-sm text-gray-700 leading-relaxed line-clamp-6 flex-1">
                                @note.Content
                            </div>
                        }
                    </div>
                    
                    <!-- Pie de la nota -->
                    <div class="px-5 bg-white border-t-2 border-gray-300 shadow-inner h-16 flex items-center">
                        <div class="flex items-center justify-between text-sm w-full">
                            <p class="font-semibold text-gray-800">@note.CreatedAt.ToString("dd MMM yyyy")</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<NoteResponse>? notes = new List<NoteResponse>();
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        var result = await Sender.Send(new GetNotesQuery());
        if (result is not null)
        {
            notes = result.IsSuccessful ? result : new List<NoteResponse>();
        }
    }
}